---
1layout: post
title: 计算机如何生成随机数? | 19.03
date: 2019-03-11 21:32:20 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: post-6.jpg # Add image post (optional)
tags: [Blog, 新得]
author: # Add name author (optional)
---



<br/>

<br/>





#### **一、计算机是如何生成随机数的？**



机器是代码执行的工具，这决定了机器的行为和运行过程是可预测的，计算机没有能力去生成一个“随机数”，或者去做一件“随机”的事情。

伪随机是一种通过一个公式（确定函数）生成一个看似“随机”结果的方法，历史上曾被广发采用的两种方法是“线性同余”和冯· 诺伊曼于1946年提出的“平方取中数”法，但对于所有伪随机序列，公式无法做到真正随机和安全信赖，并且，在序列无限扩大的过程中，他们都会开始其自循环。

你也可以任意说出一堆数字，这个序列可能看似对外界和他人呈现一定的随机性，但无论人脑任意天马行空、章法混乱，背后必有其心理动机和轨迹可“循”。

所以如何才能得到真正的随机呢? 通过公式搅混“数字汤”？人脑模拟实验？ - Nope~ 



熵（Entropy）是一个体现有序性和无序性的概念，在物理学中，可以具体为微观态的量。通常来说，在一个封闭系统中，熵描述了它的反有序性和不确定性。

在计算机操作系统中（Unix、类Unix），内核维护着一个被称为 /dev/random （内核熵池）随机数发生器 。通过记录计算机环境中的各种噪声，如一个用户的鼠标点击、移动距离、硬件响应中断事件、（在现实生活中，用户点击鼠标的时间间隔、移动长度，是一个完全随机的物理事件。连续的两次硬盘操作、硬件响应中断亦然）。

/dev/random 和 /dev/urandom 两个设备的任务就是记录它们，内核提供了将这些随机事件填入熵池的接口，并将其数字化（这个过程被称为“熵估算”），/dev/urandom 负责提供标准质量的随机数据，/dev/random 提供高质量的随机数，但由于依赖于系统中断，缺乏熵的时候会停止。(详细的内核熵池工作流程看[这里:]( https://www.cnblogs.com/bigship/archive/2010/04/04/1704228.html ))

与此同时，内核熵池保有对随机序列的质量做出评估的能力(熵池的浅深决定随机的质量)、二次回忆的能力(过程可回顾，伪随机无法做到这一点)。最后输出接口，供上层应用程序使用。

<br/>



正是这样巧妙的转化，通过继承外部世界事件的随机性，计算机成功逃逸了机器的唯程序性。





<br/>

<br/>


